#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

// Wi-Fi credentials
const char* ssid = "Suman";          // Replace with your Wi-Fi SSID (name)
const char* password = "12112134";  // Replace with your Wi-Fi Password

// Pin assignments for IR sensors
const int irSensor1Pin = D2;
const int irSensor2Pin = D1;

// Web server on port 80
ESP8266WebServer server(80);

// Variables for tracking the time and speed
volatile bool sensor1Triggered = false;
volatile bool sensor2Triggered = false;
unsigned long sensor1TriggerTime = 0;
unsigned long sensor2TriggerTime = 0;
const unsigned long debounceDelay = 200; // Milliseconds to debounce the sensors

// Speed calculation variables
float distanceBetweenSensors = 8.5; // in cm
float speed = 0.0; // in km/h

// Variables for interrupt timing
unsigned long lastInterruptTime = 0;

// Forward declarations of interrupt service routines (ISR)
void IRAM_ATTR sensor1Handler();
void IRAM_ATTR sensor2Handler();

// Setup Wi-Fi and server
void setup() {
  // Start serial communication
  Serial.begin(115200);
  
  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to Wi-Fi");
  
  // Wait until the ESP connects to Wi-Fi
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 10) { // Retry up to 10 times
    delay(1000);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nConnected to Wi-Fi");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\nFailed to connect to Wi-Fi. Please check credentials.");
  }

  // Set sensor pins as inputs
  pinMode(irSensor1Pin, INPUT);
  pinMode(irSensor2Pin, INPUT);
  
  // Attach interrupts to the IR sensors
  attachInterrupt(digitalPinToInterrupt(irSensor1Pin), sensor1Handler, FALLING);
  attachInterrupt(digitalPinToInterrupt(irSensor2Pin), sensor2Handler, FALLING);
  
  // Define routes for the web server
  server.on("/", HTTP_GET, handleRoot);
  server.on("/speed", HTTP_GET, handleSpeed); // Route to fetch the current speed
  
  // Start the web server
  server.begin();
}

void loop() {
  server.handleClient(); // Handle incoming client requests

  // Only calculate and display speed when both sensors are triggered
  if (sensor1Triggered && sensor2Triggered) {
    // Calculate the time difference in microseconds
    unsigned long timeDifference = sensor2TriggerTime - sensor1TriggerTime;

    // Convert time difference to seconds
    float timeInSeconds = timeDifference / 1000000.0;

    // Calculate speed in cm/s
    float speedInCmPerSec = distanceBetweenSensors / timeInSeconds;

    // Convert speed to km/h
    speed = speedInCmPerSec * 3600 / 100000;

    // Reset the flags for the next object
    sensor1Triggered = false;
    sensor2Triggered = false;
  }
}

// Interrupt service routine for Sensor 1
void IRAM_ATTR sensor1Handler() {
  unsigned long currentInterruptTime = micros();
  // Debounce to avoid multiple triggers
  if ((currentInterruptTime - lastInterruptTime) > debounceDelay) {
    sensor1TriggerTime = currentInterruptTime;
    sensor1Triggered = true;
  }
  lastInterruptTime = currentInterruptTime;
}

// Interrupt service routine for Sensor 2
void IRAM_ATTR sensor2Handler() {
  unsigned long currentInterruptTime = micros();
  // Debounce to avoid multiple triggers
  if ((currentInterruptTime - lastInterruptTime) > debounceDelay) {
    sensor2TriggerTime = currentInterruptTime;
    sensor2Triggered = true;
  }
  lastInterruptTime = currentInterruptTime;
}

// Handle root route for the web server
void handleRoot() {
  String message = "<html><body>";
  message += "<h1>Speed Monitoring</h1>";
  message += "<p>Current Speed: <span id='speed'>Loading...</span> km/h</p>";

  // Add warning message if speed is above 20 km/h
  message += "<div id='warning' style='color:red; display:none;'><strong>Warning: Speeding detected!</strong></div>";

  message += "<script>";
  message += "function updateSpeed() {";
  message += "  fetch('/speed').then(response => response.json()).then(data => {";
  message += "    document.getElementById('speed').textContent = data.speed.toFixed(2);";
  message += "    if (data.speed > 10) {";
  message += "      document.getElementById('warning').style.display = 'block';";
  message += "    } else {";
  message += "      document.getElementById('warning').style.display = 'none';";
  message += "    }";
  message += "  });";
  message += "}";
  message += "setInterval(updateSpeed, 1000); // Update speed every second";
  message += "updateSpeed(); // Initial call to update speed right away";
  message += "</script>";
  
  message += "</body></html>";

  server.send(200, "text/html", message); // Send the web page to the client
}

// Handle speed route to return the current speed as JSON
void handleSpeed() {
  String jsonResponse = "{";
  jsonResponse += "\"speed\": " + String(speed);
  jsonResponse += "}";

  server.send(200, "application/json", jsonResponse); // Send the JSON response
}
